using System;
using System.Collections.Generic;
using System.Linq;

namespace LibrarySystem
{
    internal class Library
    {
        public List<Book> Books { get; private set; } = new List<Book>();
        public List<Member> Members { get; private set; } = new List<Member>();

        
        public void AddBook(Book b)
        {
            if (b == null)
            {
                Console.WriteLine("Invalid book.");
                return;
            }
            Books.Add(b);
            Console.WriteLine($"Book '{b.Title}' has been added.");
        }

    
        public void RemoveBook(Book b)
        {
            if (Books.Remove(b))
                Console.WriteLine($"Book '{b.Title}' has been removed.");
            else
                Console.WriteLine("Book not found.");
        }

        public Book SearchBook(string title)
        {
            return Books.FirstOrDefault(b => b.Title.Contains(title, StringComparison.OrdinalIgnoreCase));
        }
       
        public void RegisterMember(Member m)
        {
            if (Members.Any(mem => mem.Name.Equals(m.Name, StringComparison.OrdinalIgnoreCase)))
            {
                Console.WriteLine($"Member '{m.Name}' is already registered.");
                return;
            }
            Members.Add(m);
            Console.WriteLine($"{m.Name} has been registered as a member.");
        }

        
        public void RegisterAdmin(Member m)
        {
            if (Members.Any(mem => mem.Name.Equals(m.Name, StringComparison.OrdinalIgnoreCase)))
            {
                Console.WriteLine($"Admin '{m.Name}' is already registered.");
                return;
            }
            Members.Add(m);
            Console.WriteLine($"{m.Name} has been registered as an admin.");
        }


        public void DisplayBooksStatus()
        {
            Console.ForegroundColor = ConsoleColor.Blue;
            Console.WriteLine("\nLibrary Books:");
            Console.ResetColor();
            foreach (var book in Books)
            {
                string status = book.IsBorrowed ? "Not Available" : "Available";
                Console.WriteLine($"{book.ID} - {book.Title} ({status})");
            }
        }
        public void ShowStatistics()
        {
            int totalBooks = Books.Count;
            int borrowedBooks = Books.Count (b =>  b.IsBorrowed);
            int availableBooks = totalBooks - borrowedBooks;
            Console.ForegroundColor = ConsoleColor.Blue;
            Console.WriteLine("=== Library Statistics ===");
            Console.ResetColor();
            Console.WriteLine($"Total Books: {totalBooks}");
            Console.WriteLine($"Available Books: {availableBooks}");
            Console.WriteLine($"Borrowed Books: {borrowedBooks}");

            var topMember = Members.OrderByDescending(m => m.BorrowedBooks.Count).FirstOrDefault();
            if (topMember != null)
            {
                Console.WriteLine($"Top Borrower: {topMember.Name} ({topMember.BorrowedBooks.Count} books)");
            }







        }


    }
}
